//
//  ETGToken.m
//  PDF_Export
//
//  Created by Accenture Mobility Services on 10/9/13.
//  Copyright (c) 2013 Accenture. All rights reserved.
//

#import "ETGToken.h"
#import "ETGWebServiceCommonImports.h"
#import "ETGProjectTestOutput.h"
#import "ETGAppDelegate.h"
#import "ETGWebService.h"
#import <AdSupport/ASIdentifierManager.h>
#import "ETGUserDefaultManipulation.h"
#import "NSData+Base64.h"
#import "UICKeyChainStore.h"


@interface ETGToken ()

@property (nonatomic, strong) RKObjectManager* managedObject;
@property (nonatomic, strong) RKEntityMapping* mapping;
@property (nonatomic, strong) RKEntityMapping* inverseMapping;
@property (nonatomic) BOOL isMapped;

@end

@implementation ETGToken

+ (instancetype)sharedToken {
    static id instance;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        instance = [[self alloc] init];
    });
    return instance;
}

- (id)init {
    self = [super init];
    if (self) {
        self.managedObject = [[ETGWebService sharedWebService] objectManager];
        if (!self.isMapped) {
            self.isMapped = YES;
<<<<<<< HEAD
            _keychainItem = [[KeychainItemWrapper alloc] initWithIdentifier:@"SaveToken" accessGroup:nil];
=======
>>>>>>> origin/master
            _deviceId = [[[ASIdentifierManager sharedManager] advertisingIdentifier] UUIDString];
        }
    }
    return self;
}

- (void)getToken:(NSString *)loginName andPassword:loginPassword success:(void (^)(NSString *token, NSString *key))success failure:(void (^)(NSError * error))failure {
    
    ETGAppDelegate *appDelegate =  [[UIApplication sharedApplication] delegate];
    NSString *key = [self generateAESKeyFromPassword:loginPassword];
    NSString *credential = [NSString stringWithFormat:@"%@#ETG#%@#ETG#%@", loginName, self.deviceId, key];
    DDLogInfo(@"Send credential: %@", credential);
    
    NSString *path = [NSString stringWithFormat:@"%@%@%@", kBaseURL, kPortfolioService, kAuthenticateEtgUser];
    NSURL *url = [NSURL URLWithString:path];
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];
    [request setValue:credential forHTTPHeaderField:@"X-ETG-Credential"];
    [request setValue:loginPassword forHTTPHeaderField:@"X-ETG-UserCode"];
    [request setHTTPMethod:@"GET"];
    
    AFHTTPRequestOperation *operation = [_managedObject.HTTPClient HTTPRequestOperationWithRequest:request success:^(AFHTTPRequestOperation *operation, id responseObject)
    {
        NSDictionary *responseHeadersDict = [operation.response allHeaderFields];
        NSString *strXStatus = [responseHeadersDict valueForKey:@"X-Status"];
<<<<<<< HEAD
//        NSString *strXErrorMsg = [responseHeadersDict valueForKey:@"X-Message"];

=======
>>>>>>> origin/master
        if ([strXStatus rangeOfString:@"success" options:NSCaseInsensitiveSearch].location != NSNotFound) {

<<<<<<< HEAD
            }
=======
            NSString *token = [responseHeadersDict valueForKey:@"X-Token"];
>>>>>>> origin/master
            
            if ( _willGetNewMetadata) {
                [[NSNotificationCenter defaultCenter] postNotificationName:@"callCategories" object:self];
                _willGetNewMetadata = NO;
            }
            
            success (token, key);
            
        } else {
<<<<<<< HEAD
            appDelegate.token = nil;

            /*UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:@"Elevate To Go" message:@"Login Failed: Unknown username or bad password" delegate:self cancelButtonTitle:nil otherButtonTitles:@"OK", nil];
            [errorAlert show];*/
            [self.delegate setErrorLoginMessage:@"Invalid username or password."];
        
=======
            NSDictionary *responseHeadersDict = [operation.response allHeaderFields];
            NSString *strXErrorMsg = [responseHeadersDict valueForKey:@"X-Message"];
>>>>>>> origin/master
            
            [self.delegate setErrorLoginMessage:strXErrorMsg];
            [appDelegate performSelector:@selector(stopActivityIndicatorSmall) withObject:self afterDelay:0];

            NSError *error = [CommonMethods createAnErrorWithMessage:strXErrorMsg];
            failure (error);
        }
        
    } failure:^(AFHTTPRequestOperation *operation, NSError *error) {
        
        NSDictionary *responseHeadersDict = [operation.response allHeaderFields];
        NSString *strXErrorMsg = [responseHeadersDict valueForKey:@"X-Message"];
<<<<<<< HEAD
        NSLog(@"%@", strXErrorMsg);

        appDelegate.token = nil;

        /*UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:@"Elevate To Go" message:error.description delegate:self cancelButtonTitle:nil otherButtonTitles:@"OK", nil];
        [errorAlert show];*/
=======
        DDLogInfo(@"X-Message: %@", strXErrorMsg);

>>>>>>> origin/master
        appDelegate.isNetworkServerAvailable = NO;
        [self.delegate setErrorLoginMessage:error.localizedDescription];
        
        [appDelegate performSelector:@selector(stopActivityIndicatorSmall) withObject:self afterDelay:0];
<<<<<<< HEAD
    }];
    
    operation.SSLPinningMode = AFSSLPinningModeCertificate;
    [_managedObject.HTTPClient enqueueHTTPRequestOperation:operation];
}

-(void) getResponseHeader {
    
}

-(void) checkIfTokenIsExpired:(void (^)(NSString *token))success failure:(void (^)(NSError *))failure {
    
    // Check if token is expired already.
    BOOL isTokenExpired = [[ETGUserDefaultManipulation sharedUserDefaultManipulation]
                           isTimeStampMoreThanHalfHourForModule:@"Token"];
    
    if (isTokenExpired) {
        [self requestNewToken:^(NSString *token) {
            success (token);
        } failure:^(NSError *error) {
            failure (error);
        }];
    } else {
        success (_token);
    }
}

-(void) requestNewToken:(void (^)(NSString *token))success failure:(void (^)(NSError *))failure {
    
    ETGAppDelegate *appDelegate =  [[UIApplication sharedApplication] delegate];
    
    KeychainItemWrapper* keychain = [[KeychainItemWrapper alloc] initWithIdentifier:@"ETG" accessGroup:nil];
    
    NSString *userId = [NSString stringWithFormat:@"%@%@%@", [keychain objectForKey:(__bridge id)kSecAttrAccount], @"#ETG#", self.deviceId];
    
    NSString *path = [NSString stringWithFormat:@"%@%@%@", kBaseURL, kPortfolioService, kAuthenticateEtgUser];
    NSURL *url = [NSURL URLWithString:path];
    
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];
    [request setValue:userId forHTTPHeaderField:@"X-ETG-Credential"];
    [request setValue:[[NSString alloc] initWithData:[keychain objectForKey:(__bridge NSData *)kSecValueData]
                                            encoding:NSUTF8StringEncoding] forHTTPHeaderField:@"X-ETG-UserCode"];
    [request setHTTPMethod:@"GET"];
    
    AFHTTPRequestOperation *operation = [_managedObject.HTTPClient HTTPRequestOperationWithRequest:request success:^(AFHTTPRequestOperation *operation, id responseObject) {
        
        NSDictionary *responseHeadersDict = [operation.response allHeaderFields];
        NSString *strXToken = [responseHeadersDict valueForKey:@"X-Token"];
        NSString *strXStatus = [responseHeadersDict valueForKey:@"X-Status"];
        NSString *strXErrorMsg = [responseHeadersDict valueForKey:@"X-Message"];
        
        if ([strXStatus isEqualToString:@"success"]) {
            _token = strXToken;
            appDelegate.token = _token;
            
            [[ETGUserDefaultManipulation sharedUserDefaultManipulation] storeTimeStampInNSUserDefaults:[NSDate date] forModule:@"Token"];
            success (_token);
            
        } else {

//            appDelegate.token = nil;
            
            [_keychainItem setObject:_token forKey:(__bridge id)(kSecValueData)];
            
            NSMutableDictionary *errorDetail = [NSMutableDictionary dictionary];
            [errorDetail setValue:strXErrorMsg forKey:NSLocalizedDescriptionKey];
            NSError *responseError = [NSError errorWithDomain:@"ETG" code:102 userInfo:errorDetail];
            
            failure (responseError);
        }
        
    } failure:^(AFHTTPRequestOperation *operation, NSError *error) {
=======
>>>>>>> origin/master
        
        failure (error);
    }];
    
    operation.SSLPinningMode = AFSSLPinningModeCertificate;
    [_managedObject.HTTPClient enqueueHTTPRequestOperation:operation];
}

<<<<<<< HEAD
    return keyChainToken;
    
}


=======

- (NSString *)generateAESKeyFromPassword:(NSString *)password
{
    NSData *salt = [CommonMethods randomDataOfLength:8];
    NSData *keyData = [CommonMethods AESKeyForPassword:password salt:salt];
    NSString *key = [keyData base64EncodedString];
    
    return key;
}

>>>>>>> origin/master
@end
